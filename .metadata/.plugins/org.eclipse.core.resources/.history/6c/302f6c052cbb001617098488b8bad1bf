import java.util.Date;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.hibernate.validator.internal.util.logging.LoggerFactory;


public class Security {

    private final Logger       log              = LoggerFactory.getLogger( CipherUtilSecret.class );

    public static final String CIPHER_ALGORITHM = "AES";
    public static final String KEY_ALGORITHM    = "AES";
    public static final byte[] SECRET_KEY       = "16BYTESSECRETKEY".getBytes( Charsets.UTF_8 );    // exactly
                                                                                                    // 16
                                                                                                    // bytes
                                                                                                    // to
                                                                                                    // not
                                                                                                    // use
                                                                                                    // JCE
                                                                                                    // (Java
                                                                                                    // Cryptography
                                                                                                    // Extension)

    public String decrypt( String encryptedInput ) {
        try {
            Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );
            cipher.init( Cipher.DECRYPT_MODE, new SecretKeySpec( SECRET_KEY, KEY_ALGORITHM ) );
            return new String( cipher.doFinal( Base64.decodeBase64( encryptedInput ) ), Charsets.UTF_8 );

        } catch ( Exception e ) {
            log.warn( e.getMessage(), e );
            throw new RuntimeException( e );
        }
    }

    public String encrypt( String str ) {
        try {
            Cipher cipher = Cipher.getInstance( CIPHER_ALGORITHM );
            cipher.init( Cipher.ENCRYPT_MODE, new SecretKeySpec( SECRET_KEY, KEY_ALGORITHM ) );
            return Base64.encodeBase64URLSafeString( cipher.doFinal( str.getBytes( Charsets.UTF_8 ) ) );

        } catch ( Exception e ) {
            log.warn( e.getMessage(), e );
            throw new RuntimeException( e );
        }
    }

    public static void main( String[] args ) {
        CipherUtilSecret cipherUtil = new CipherUtilSecret();
        // Encryption
        String encryptedString = cipherUtil
                .encrypt( "1,2,3 allons dans les bois : " + String.valueOf( new Date().getTime() ) );
        // Before Decryption
        System.out.println( "Avant déchiffrement : " + encryptedString );
        String s = cipherUtil.decrypt( encryptedString );
        System.out.println( "Après déchiffrement : " + s );
    }
}
